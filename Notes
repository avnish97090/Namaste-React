
               LECTURE 2 NOTES   


All the libraries that we need , all the utilities that we need come from npm


NPM :- Its a package manager , it will manage all the packages that we install in the system , sometime packages are also known as dependencies 



Package.json is basically a configuration for our NPM , it keeps track of all the dependencies , all the packages our code is using 

package-lock.json keep a track of exact version of all the tansitive and all the  dependencies that is being installed , package.json keeps track of approx version of dependencies .

Parcel comes as a node package , we will install that package , Parcel is a bundler .

npm install dependencyname   


node modules contains all the  code that we fetch from npm . pacakge.json is a configuration  for our npm , whereas node modules is kind of database  , it conatins the actual data of that dependencies , of those packages that our projects needs .
NODE MODULES  basically fetches all the code of all the dependencies into our system 

Transitive dependencies :-   



we put package.json and package-lock.json on git but not node modules 
 because package.json and package-lock.json 
 maintains a node of what all dependencies our project needs . so if i havve package , packagelock i can regenerate my node modules . i just need to enter command npm install .

 whatever we can regnerate dont put it on git . git should only have essential things . if i can regenearte my node modules on the server i dont want to   put it up on github



 React makes our app fast but react is not the only thing that makes our app fast , there are so many things like parcel and many libaries to make our app fast ,



-26 pe dist folder and parcel-cache k baare me bataya huaa hai dekh lo 




// React.createElement =>ReactElement =>  Object  => HTMLElement(render)


JSX  is a javascript syntx which is easier to create react element 



JSX (transpiled before it reaches the JS) - PARCEL - Babel 

Babel job is to transpile / convert jsx  to react code so that browser can understand


JSX=> Babel transpiles it to React.createElement => ReactElement -> JS Object => HTMLElement(render)
React element is rendered as an html element to the browser 


BABEL is a  some piece of  javascript code , its a javascript library , its a node library , npm package , whic takes a piece of code , reads that code  and convert that into something else , and it convert different type of code into different  type of code 


IF we have to give attribute to JSX we have to use camelcase , ex className 

in html we use as class but in jsx we use as className


JSX is a react element , so we can also say that functional component is a function which return a react element .


const jsxfile = <h1 id = "heading" className="head"> its is a jsx file </h1>   its a react element 


const jsxfile2 = (<h1 id = "heading2" className="head1"> 
its is a jsx file2 </h1>);  // for mutiple line we wrap up jsx into ()



root.render(<Headingcomponent2  />);  this how we render functional component , this is how bable understand 
 root.render(jsxfile2);  this is how we renderrr the react element 



COMPONENT COMPOSITION :- component k under component is called component composition 


JSX sanitize the data , whatever the data is coming then pass it , it prevents cross site scripting  attack for me. 


Properties is something which we can pass to the components . let we want to dynamically pass data to some component  , we can pass it as props .


Restaurant card is functional component and functional component is just normal javascript function at the end of the day . Similarly props at the end of the day are just normal arguments to our function 


Passing a prop to a component is just like 
PASSING a argument to a function .


const Restaurantcarad = () =>{
    return ( 
        <div className = "res-card style ={{background : "#f0f0f0"}}>
 <img 
  className ='res-logo"
  alt= "res-logo"
  src="    "/>
  <h3>Meghana foods </h3>
  <h4>Briyanai , North Indian ,Asian </h4>
  <h4> 38 minutes </h4>
  </div>
  


    );
};

const body =() => {
    return (
        <div className = "res-conatiner">
        < RestaurantCard resName = "Meghana Foods" , cuisine ="Briyani, NorthINdian , /> // THIS IS KNOWN AS PASSING PROPS TO A COMPONENT .


 
    )

}

config driven ui is like the UI is driven by the config which is sent by the backend 

React will basically take all these properties  and it will wrap it inside a object and it will pass it over here as a props . const RestaurantCard = (props) => {
this props will be an object now .
console.log(props); 
 }      


destructuring on the  fly m bhi yahi hota hai ki , react is wrapping this inside a object and it is passing to that function . 
aisey const RestaurantCard = ({resname , cuisine}) =>{
    
}



 <div className="res-container">
      {
        resList.map(restaurant => <RestaurantCard   resData = {restaurant}/>)
      }    //  inside my res container  i have looped over my reslist and i am doing .map  for each restaurant  i am returning a piece of jsx 




when react was built  it was built with the fundamental  that in javascript only  we will kind of  build our markup as well as  logic  earlier we use to have our html file   different for markup  and different javascript file for logic  now we can run loops  in jsx  inside our  javascript file  and we can put in  markup  parsing classname , div , id ,  properties , h1 tag  , everything we can do  in the same place 


when new restaurant card came in inside res conatiner it will rerender all the restaurantcard  because react doesnot know which restaurant card is new  , at which place new restaurant card should place  at first place or second place , it will treat all the  restaurant card is same , but if we give all of them a unique id  then react will  exactly know wheree it should place new card , now it will not rerender all the restaurant card ,   it will just render only restaurant  , this is highly optimization ,  so whenever we do a map , make a habit to give a unquie key ,  some people also uses indexes as key , 

{reslist.map(restaurant , index )=> <RestaurenCard key = {index} resData = {restaurant}/>}

but react says not to use index as key , if there is nothing available then use index as key ,



                                      LECTURE 5 NOTES 

TWO TYPES OF Export / Import 



-Default Export/Import 

export default Component ;
import Component from "path" ;

- Named Export/Import 
export const Component 
import {Component}  from "path" ;


in this button i will pass an attribue onclick and that attribute will take a callback function ,
  <button className="filter-btn" onClick={ () =>{
                console.log("buttonn clicked ")
                }
                  } >Top Rated Restaurants</button>

 <button className="filter-btn" onClick={ () =>{
                listOfRestaurant = listOfRestaurants.filter (
                    (res)=> res.data.avgRating>4
                );
                }
                  } >Top Rated Restaurants</button>

     so when we filter the restaurant list by onclick event on the most searched restaurant , the updated list  shows on the console but it doesnot shows on UI , UI pe sara ka sara restaurant rahtaa haai , 
     this is where   react comes into picture , it keeps data and the UI layer   consistent with each other , sync with each other , tied with each other , this is where react comes into picture , all the other frame work are trying to solve this , 



WHEN WE SAY REACT IS FAST , it is faster in dom manipulation , it is  efficient in dom  manipulation        





IN JAVASCRIPT WE DEFINE VARIABLE IN REACT WE DEFINE STATE VARIABLE 




HOOKS ARE NOTHING BUT NORMAL JAVASCRIPT UTILITY FUNCTION 

HOOKS  are nothing but normal javascript utility  function which react gives to us .ITS A pre built,the only thing is this function comes with some superpower , this function has some logic written behind the secne inside react ,that function is a utility function given by react  to us ,   its own specific use case  where we use this function 

jab hum react ko import kartey hain usi k sath sara aa jataa haai hooks , 



useState()  :- it is used to generate  superpowerful STATE varaible , it gives superpowerful react variable , it is called state variable because it maintains the state of our app , maintians the state of component . and the scope of state varaibale is inside that component .



const [listOfRestaurants] = useState();
what happens is when we call the useState(); it will give you a state variabble  and how we recive that state variable like this inside an array  const [listOfRestaurants];
=>  const [listOfRestaurants] = useState();
now this listOfRestaurants is a list of variable which is superpowerful react variable .


            state variable 
=>  const [listOfRestaurants] = useState();
this is exactly like 

Normal js variable 
let listOfRestaurants ;


suppose we give js variable an empty array 
we gave the default value  of this listOfRestaurant as empty array initially , 
let listOfRestaurants = [] ;
similarlly we pass  default value at here useState([]); 
so whatever we pass here  [] becomes the default value of the state  variable  . 


and we use state variable normally in code , like we do in js ,     


if i have to modify state variable , we modify it by a function , and the function comes as the second parameterin the array  


=>  const [listOfRestaurants, setListOfRestaurant] = useState();



EPISODE 5 
last k 30 min m sara definition diya hua hai 



React is only good at DOM manipulation , DOM operation .REACT IS fast becuse it does efficient dom manipulation , because it has VIRTUAL DOM .  IT keeps  our data layer in sync with the UI layer. 

RECONCILIATION ALGORITHM (also known as react fibre ) :-


VIRTUAL DOM :-


DIFF ALGORITHM :-



whenever there is a change in any state variable , react will find out the difference between the virtual dom and it will rerender tour component , it will update the dom . it will update the UI .

-4 se -3 k bich ek line bahut aachaa sir boley hain SETlistofrestaurat k baare me dekh lo . 



SERVER SIDE RENDERING AND SERVER SIDE ROUTING DEKH LO DONO ME ,















whenever we change a local state variable react rerenders the  component 


virtual dom is object representation of  jsx, actual dom 